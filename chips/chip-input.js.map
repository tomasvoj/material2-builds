{"version":3,"file":"chip-input.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-input.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAC,MAAM,eAAe;OACnF,EAAC,KAAK,EAAC,MAAM,2BAA2B;AAc/C;IAsBE,qBAAsB,SAAmB,EAAY,WAAuB;QAAtD,cAAS,GAAT,SAAS,CAAU;QAAY,gBAAW,GAAX,WAAW,CAAY;QApB5E;;;;WAIG;QACM,cAAS,GAAG,KAAK,CAAC;QAE3B;;;;WAIG;QACM,kBAAa,GAAa,CAAC,KAAK,CAAC,CAAC;QAE3C,0CAA0C;QAChC,cAAS,GAAG,IAAI,YAAY,EAAoB,CAAC;QAMzD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAiC,CAAC;IAC1E,CAAC;IAED;;;;OAIG;IACH,8BAAQ,GAAR,UAAS,KAAqB;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,2BAAK,GAAL;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,0BAAI,GAAJ,UAAK,KAAqB;QACxB,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YAEpF,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAK,CAAC,cAAc,EAAE,CAAC;YACzB,CAAC;QACH,CAAC;IACH,CAAC;IApDD;QAAC,KAAK,EAAE;;kDAAA;IAOR;QAAC,KAAK,EAAE;;sDAAA;IAGR;QAAC,MAAM,EAAE;;kDAAA;IAxBX;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,+BAA+B;YACzC,IAAI,EAAE;gBACJ,WAAW,EAAE,kBAAkB;gBAC/B,QAAQ,EAAE,SAAS;aACpB;SACF,CAAC;;mBAAA;IA6DF,kBAAC;AAAD,CAAC,AA5DD,IA4DC","sourcesContent":["import {Directive, Output, EventEmitter, Renderer, ElementRef, Input} from '@angular/core';\nimport {ENTER} from '../core/keyboard/keycodes';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\n\n@Directive({\n  selector: '[mdChipInput], [matChipInput]',\n  host: {\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n})\nexport class MdChipInput {\n\n  /**\n   * Whether or not the chipAdded event will be emitted when the input is blurred.\n   *\n   * Default `false`.\n   */\n  @Input() addOnBlur = false;\n\n  /**\n   * The list of key codes that will trigger a chipAdded event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input() separatorKeys: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output() chipAdded = new EventEmitter<MdChipInputEvent>();\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _renderer: Renderer, protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /**\n   * Utility method to make host definition/tests more clear.\n   *\n   * @private\n   */\n  _keydown(event?: KeyboardEvent) {\n    this._add(event);\n  }\n\n  /**\n   * Checks to see if the blur should emit the (chipAdded) event.\n   *\n   * @private\n   */\n  _blur() {\n    if (this.addOnBlur) {\n      this._add();\n    }\n  }\n\n  /**\n   * Checks to see if the (chipAdded) event needs to be emitted.\n   *\n   * @private\n   */\n  _add(event?: KeyboardEvent) {\n    if (!event || this.separatorKeys.indexOf(event.keyCode) > -1) {\n      this.chipAdded.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n}\n"]}