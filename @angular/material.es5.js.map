{"version":3,"file":"material.es5.js","sources":["../../src/lib/index.ts","../../src/lib/public_api.ts","../../src/lib/module.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-errors.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/tooltip-errors.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-errors.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-remove.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-list-errors.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core/core.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/a11y/fake-mousedown.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/portal/dom-portal-host.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/option/option.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/keyboard/keycodes.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/core/line/line.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/errors/error.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ScrollDispatcher,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,MdError,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,GlobalPositionStrategy,ElementBoundingPositions,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,COMMA,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,MaterialRootModule,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChip,MdChipInputEvent,MdChipInput,MdChipRemove,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox,MdDialogModule,MD_DIALOG_DATA,MdDialog,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconRegistry,MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError,MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect,MdSidenavModule,MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabNavBar,MdTabLink,MdTabLinkRipple,MdToolbarModule,MdToolbarRow,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵf} from './core/a11y/live-announcer';\nexport {mixinDisabled as ɵq} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵg} from './core/coordination/unique-selection-dispatcher';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵo} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵn,VIEWPORT_RULER_PROVIDER_FACTORY as ɵm,ViewportRuler as ɵl} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵd,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵc} from './core/overlay/scroll/scroll-dispatcher';\nexport {Scrollable as ɵp} from './core/overlay/scroll/scrollable';\nexport {RippleRenderer as ɵe} from './core/ripple/ripple-renderer';\nexport {MdGridAvatarCssMatStyler as ɵi,MdGridTileFooterCssMatStyler as ɵk,MdGridTileHeaderCssMatStyler as ɵj,MdGridTileText as ɵh} from './grid-list/grid-tile';","/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ScrollDispatcher,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,MdError,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,GlobalPositionStrategy,ElementBoundingPositions,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,COMMA,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './core';\nexport {MaterialRootModule,MaterialModule} from './module';\n\nexport {MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete/index';\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button/index';\nexport {MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle/index';\nexport {MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card/index';\nexport {MdChipsModule,MdChipList,MdChipEvent,MdChip,MdChipInputEvent,MdChipInput,MdChipRemove} from './chips/index';\nexport {MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox} from './checkbox/index';\nexport {MdDialogModule,MD_DIALOG_DATA,MdDialog,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef} from './dialog/index';\nexport {MdGridListModule,MdGridTile,MdGridList} from './grid-list/index';\nexport {MdIconModule,MdIconRegistry,MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon/index';\nexport {MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError} from './input/index';\nexport {MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list/index';\nexport {MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu/index';\nexport {MdProgressBarModule,MdProgressBar} from './progress-bar/index';\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner} from './progress-spinner/index';\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton} from './radio/index';\nexport {MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect} from './select/index';\nexport {MdSidenavModule,MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav/index';\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer} from './slider/index';\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle} from './slide-toggle/index';\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar} from './snack-bar/index';\nexport {MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tabs/index';\nexport {MdTabNavBar,MdTabLink,MdTabLinkRipple} from './tabs/tab-nav-bar/index';\nexport {MdToolbarModule,MdToolbarRow,MdToolbar} from './toolbar/index';\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip/index';\n","import {NgModule, ModuleWithProviders} from '@angular/core';\n\nimport {\n  MdRippleModule,\n  RtlModule,\n  ObserveContentModule,\n  PortalModule,\n  OverlayModule,\n  A11yModule,\n  CompatibilityModule,\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDialogModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  CompatibilityModule,\n  ObserveContentModule\n];\n/**\n * @deprecated\n */\nexport class MaterialRootModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdAutocompleteModule.forRoot(),\n    MdButtonModule.forRoot(),\n    MdCardModule.forRoot(),\n    MdChipsModule.forRoot(),\n    MdCheckboxModule.forRoot(),\n    MdGridListModule.forRoot(),\n    MdInputModule.forRoot(),\n    MdListModule.forRoot(),\n    MdProgressBarModule.forRoot(),\n    MdProgressSpinnerModule.forRoot(),\n    MdRippleModule.forRoot(),\n    MdSelectModule.forRoot(),\n    MdSidenavModule.forRoot(),\n    MdTabsModule.forRoot(),\n    MdToolbarModule.forRoot(),\n    PortalModule.forRoot(),\n    RtlModule.forRoot(),\n    ObserveContentModule.forRoot(),\n\n    // These modules include providers.\n    A11yModule.forRoot(),\n    MdButtonToggleModule.forRoot(),\n    MdDialogModule.forRoot(),\n    MdIconModule.forRoot(),\n    MdMenuModule.forRoot(),\n    MdRadioModule.forRoot(),\n    MdSliderModule.forRoot(),\n    MdSlideToggleModule.forRoot(),\n    MdSnackBarModule.forRoot(),\n    MdTooltipModule.forRoot(),\n    PlatformModule.forRoot(),\n    OverlayModule.forRoot(),\n    CompatibilityModule.forRoot(),\n  ],\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialRootModule.ctorParameters;\n}\n\n/**\n * @deprecated\n */\nexport class MaterialModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {ngModule: MaterialRootModule};\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MdOptionModule, OverlayModule, OVERLAY_PROVIDERS, CompatibilityModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdAutocompleteModule,\n      providers: [OVERLAY_PROVIDERS]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, CompatibilityModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, CompatibilityModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Subscription to global scroll events.\n */\nprivate _scrollSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _scrollDispatcher\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        let /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        return this._panelOpen &&\n               !this._inputContainer._elementRef.nativeElement.contains(clickTarget) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: ScrollDispatcher, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Subscription to global scroll events.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._scrollSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollDispatcher;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Highlightable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  CompatibilityModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdDialogModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    CompatibilityModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    CompatibilityModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MdDialog} from './dialog';\nexport {MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\nexport {MD_DIALOG_DATA} from './dialog-injector';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close]',\n  host: {\n    '(click)': 'dialogRef.close()',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title]',\n  host: {\n    '[class.mat-dialog-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n  host: {\n    '[class.mat-dialog-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n  host: {\n    '[class.mat-dialog-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Overlay, OverlayRef, ComponentType, OverlayState, ComponentPortal} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\nimport'rxjs/add/operator/first';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance.dialogConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    if (!config.disableClose) {\n      // When the dialog backdrop is clicked, we want to close it.\n      overlayRef.backdropClick().first().subscribe(() => dialogRef.close());\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog._containerInstance.dialogConfig.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  Renderer,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\ndialogConfig: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusFirstTabbableElementWhenReady();\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._onAnimationStateChange.complete();\n    }\n  }\n/**\n * Kicks off the leave animation and restores focus to the previously-focused element.\n * \\@docs-private\n * @return {?}\n */\n_exit(): void {\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    let /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._state = 'exit';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('enter', style({ transform: 'translate3d(0, 0, 0) scale(1)', opacity: 1 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    '[class.mat-dialog-container]': 'true',\n    '[attr.role]': 'dialogConfig?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype.dialogConfig;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._renderer;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.\n * \\@docs-private\n */\nexport class MdDialogContentAlreadyAttachedError extends MdError {\nconstructor() {\n      super('Attempting to attach dialog content after content is already attached');\n  }\n}\n","import {ViewContainerRef} from '@angular/core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n}\n\n","import {Injector, OpaqueToken} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new OpaqueToken('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _dialogRef\n * @param {?} _data\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _dialogRef: MdDialogRef<any>,\nprivate _data: any) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === MdDialogRef) {\n      return this._dialogRef;\n    }\n\n    if (token === MD_DIALOG_DATA) {\n      return this._data;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._dialogRef;\n/** @type {?} */\nDialogInjector.prototype._data;\n}\n\n","import {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport'rxjs/add/operator/filter';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\npublic _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange\n      .filter((event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this.componentInstance = null;\n      }, null, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._exit();\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, CompatibilityModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdMenuModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    CompatibilityModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, CompatibilityModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Renderer,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {MdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Dir,\n    LayoutDirection,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _renderer\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _renderer: Renderer,\nprivate _dir: Dir) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n      this.menu._emitCloseEvent();\n    });\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throw new MdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Renderer, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._renderer;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// TODO(kara): prevent-close functionality\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {MdMenuInvalidPositionX, MdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n */\npositionX: MenuPositionX = 'after';\n/**\n * Position of the menu in the Y axis.\n */\npositionY: MenuPositionY = 'below';\n\n   templateRef: TemplateRef<any>;\n   items: QueryList<MdMenuItem>;\n   overlapTrigger = true;\n/**\n * @param {?} posX\n * @param {?} posY\n * @param {?} deprecatedPosX\n * @param {?} deprecatedPosY\n */\nconstructor( posX: MenuPositionX,\n               posY: MenuPositionY,\n               deprecatedPosX: MenuPositionX,\n               deprecatedPosY: MenuPositionY) {\n\n    // TODO(kara): Remove kebab-case attributes after next release\n    if (deprecatedPosX) { this._setPositionX(deprecatedPosX); }\n    if (deprecatedPosY) { this._setPositionY(deprecatedPosY); }\n\n    if (posX) { this._setPositionX(posX); }\n    if (posY) { this._setPositionY(posY); }\n    this.setPositionClasses(this.positionX, this.positionY);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._emitCloseEvent();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n      obj[className] = true;\n      return obj;\n    }, {});\n    this.setPositionClasses(this.positionX, this.positionY);\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * @param {?} pos\n * @return {?}\n */\nprivate _setPositionX(pos: MenuPositionX): void {\n    if (pos !== 'before' && pos !== 'after') {\n      throw new MdMenuInvalidPositionX();\n    }\n    this.positionX = pos;\n  }\n/**\n * @param {?} pos\n * @return {?}\n */\nprivate _setPositionY(pos: MenuPositionY): void {\n    if (pos !== 'above' && pos !== 'below') {\n      throw new MdMenuInvalidPositionY();\n    }\n    this.positionY = pos;\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?} posX\n * @param {?} posY\n * @return {?}\n */\nsetPositionClasses(posX: MenuPositionX, posY: MenuPositionY): void {\n    this._classList['mat-menu-before'] = posX == 'before';\n    this._classList['mat-menu-after'] = posX == 'after';\n    this._classList['mat-menu-above'] = posY == 'above';\n    this._classList['mat-menu-below'] = posY == 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['xPosition', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['yPosition', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['x-position', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['y-position', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Position of the menu in the X axis.\n * @type {?}\n */\nMdMenu.prototype.positionX;\n/**\n * Position of the menu in the Y axis.\n * @type {?}\n */\nMdMenu.prototype.positionY;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/** @type {?} */\nMdMenu.prototype.items;\n/** @type {?} */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","import {Component, ElementRef, Input, Renderer} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem implements Focusable {\n/**\n * Whether the menu item is disabled\n */\nprivate _disabled: boolean = false;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * Whether the menu item is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this._disabled ? '-1' : '0';\n  }\n/**\n * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n * @return {?}\n */\n_getDisabledAttr(): boolean {\n    return this._disabled ? true : null;\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  host: {\n    'role': 'menuitem',\n    '[class.mat-menu-item]': 'true',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.propDecorators;\n/**\n * Whether the menu item is disabled\n * @type {?}\n */\nMdMenuItem.prototype._disabled;\n/** @type {?} */\nMdMenuItem.prototype._renderer;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Exception thrown when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n */\nexport class MdMenuMissingError extends MdError {\nconstructor() {\n    super(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>\n    `);\n  }\n}\n/**\n * Exception thrown when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n */\nexport class MdMenuInvalidPositionX extends MdError {\nconstructor() {\n    super(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>\n    `);\n  }\n}\n/**\n * Exception thrown when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n */\nexport class MdMenuInvalidPositionY extends MdError {\nconstructor() {\n    super(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>\n    `);\n  }\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {OverlayModule, CompatibilityModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdTooltipModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [OverlayModule, CompatibilityModule, PlatformModule],\n  exports: [MdTooltip, TooltipComponent, CompatibilityModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {MdTooltipInvalidPositionError} from './tooltip-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY  = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnInit, OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\n  scrollSubscription: Subscription;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // When a scroll on the page occurs, update the position in case this tooltip needs\n    // to be repositioned.\n    this.scrollSubscription = this._scrollDispatcher.scrolled(SCROLL_THROTTLE_MS, () => {\n      if (this._overlayRef) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    if (this.scrollSubscription) {\n      this.scrollSubscription.unsubscribe();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n    let /** @type {?} */ config = new OverlayState();\n    config.positionStrategy = strategy;\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw new MdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw new MdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype.scrollSubscription;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw new MdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Exception thrown when a tooltip has an invalid position.\n * \\@docs-private\n */\nexport class MdTooltipInvalidPositionError extends MdError {\n/**\n * @param {?} position\n */\nconstructor(position: string) {\n    super(`Tooltip position \"${position}\" is invalid.`);\n  }\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdToolbarModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdToolbar, MdToolbarRow, CompatibilityModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer\n} from '@angular/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {\n    '[class.mat-toolbar-row]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbar {\nprivate _color: string;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private elementRef: ElementRef,\nprivate renderer: Renderer) { }\n/**\n * The color of the toolbar. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this.renderer.setElementClass(this.elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  host: {\n    '[class.mat-toolbar]': 'true',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n};\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n/** @type {?} */\nMdToolbar.propDecorators;\n/** @type {?} */\nMdToolbar.prototype._color;\n/** @type {?} */\nMdToolbar.prototype.elementRef;\n/** @type {?} */\nMdToolbar.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {ObserveContentModule} from '../core/observe-content/observe-content';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNavBar, MdTabLink, MdTabLinkRipple} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {SCROLL_DISPATCHER_PROVIDER} from '../core/overlay/scroll/scroll-dispatcher';\nexport class MdTabsModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdTabsModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabLinkRipple\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabBody,\n    MdTabLinkRipple,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, Dir, LayoutDirection} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).startWith(null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    let /** @type {?} */ translateX = this.scrollDistance + 'px';\n    if (this._getLayoutDirection() == 'ltr') {\n      translateX = '-' + translateX;\n    }\n\n    applyCssTransform(this._tabList.nativeElement, `translate3d(${translateX}, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance;  }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Dir, LayoutDirection} from '../core';\nimport'rxjs/add/operator/map';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _dir\n * @param {?} _elementRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _elementRef: ElementRef) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  host: {\n    '[class.mat-tab-body]': 'true',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._dir;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  ViewEncapsulation,\n  Directive,\n  NgZone,\n  Inject,\n  Optional,\n  OnDestroy,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {MdRipple} from '../../core/ripple/index';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {MD_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions, Dir} from '../../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNavBar implements AfterContentInit, OnDestroy {\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\nprivate _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    '[class.mat-tab-nav-bar]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNavBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNavBar.ctorParameters;\n/** @type {?} */\nMdTabNavBar.propDecorators;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabNavBar.prototype._realignInkBar;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNavBar.prototype._inkBar;\n/** @type {?} */\nMdTabNavBar.prototype._dir;\n/** @type {?} */\nMdTabNavBar.prototype._ngZone;\n}\n\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink {\nprivate _isActive: boolean = false;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n */\nconstructor(private _mdTabNavBar: MdTabNavBar,\nprivate _elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {\n    '[class.mat-tab-link]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNavBar, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/** @type {?} */\nMdTabLink.prototype._isActive;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nexport class MdTabLinkRipple extends MdRipple {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} globalOptions\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, ruler: ViewportRuler,\n                globalOptions: RippleGlobalOptions) {\n    super(elementRef, ngZone, ruler, globalOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {\n    '[class.mat-tab-link]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\n}\n\nfunction MdTabLinkRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLinkRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLinkRipple.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Renderer, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    '[class.mat-ink-bar]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Renderer, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper {\n/**\n * @param {?} elementRef\n * @param {?} _renderer\n */\nconstructor(public elementRef: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * Whether the tab label is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.propDecorators;\n/**\n * Whether the tab label is disabled.\n * @type {?}\n */\nMdTabLabelWrapper.prototype._disabled;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n/** @type {?} */\nMdTabLabelWrapper.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport'rxjs/add/operator/map';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = null;\n/**\n * Whether the tab group should grow to the size of the active tab\n */\nprivate _dynamicHeight: boolean = false;\n/**\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\nprivate _selectedIndex: number = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return this.selectChange.map(event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(this._indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - this._indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = this._indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = this._indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    '[class.mat-tab-group]': 'true',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Whether the tab group should grow to the size of the active tab\n * @type {?}\n */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nimport {MdTabLabel} from './tab-label';\nexport class MdTab implements OnInit {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number = null;\nprivate _disabled = false;\n/**\n * Whether the tab is disabled\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._disabled;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends TemplatePortalDirective {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {OverlayModule, PortalModule, CompatibilityModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSnackBarModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    CompatibilityModule,\n  ],\n  exports: [MdSnackBarContainer, CompatibilityModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.positionStrategy = this._overlay.position().global()\n        .centerHorizontally()\n        .bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean { return !!this.action; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  host: {\n    '[class.mat-simple-snackbar]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarContentAlreadyAttached} from './snack-bar-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdSnackBarContentAlreadyAttached();\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      this._ngZone.run(() => {\n        this.onEnter.next();\n        this.onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.onExit.next();\n      this.onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Error that is thrown when attempting to attach a snack bar that is already attached.\n * \\@docs-private\n */\nexport class MdSnackBarContentAlreadyAttached extends MdError {\nconstructor() {\n    super('Attempting to attach snack bar content after content is already attached');\n  }\n}\n","import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","import {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef = null;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n}\n\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdInputModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @deprecated Use mdAutosizeMinRows\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @deprecated Use mdAutosizeMaxRows\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMinRows(): number { return this.minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) { this.minRows = value; }\n/**\n * Maximum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMaxRows(): number { return this.maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) { this.maxRows = value; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  MdInputContainerDuplicatedHintError,\n  MdInputContainerMissingMdInputError,\n  MdInputContainerPlaceholderConflictError,\n  MdInputContainerUnsupportedTypeError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n  // Whether to align the hint label at the start or end of the line.\n   align: 'start' | 'end' = 'start';\n\n  // Unique ID for the hint. Used for the aria-describedby on the input.\n   id: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/** @type {?} */\nMdHint.prototype.align;\n/** @type {?} */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    '[class.mat-input-error]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _ngControl\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\npublic _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw new MdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    return ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit {\n/**\n * Alignment of the input container's content.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether we should hide the required marker.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType = 'auto';\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (!this._mdInputChild) {\n      throw new MdInputContainerMissingMdInputError();\n    }\n\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Whether the input container is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._mdInputChild._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw new MdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw new MdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw new MdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    let /** @type {?} */ ids: string[] = [];\n    let /** @type {?} */ startHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'start') : null;\n    let /** @type {?} */ endHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'end') : null;\n\n    if (startHint) {\n      ids.push(startHint.id);\n    } else if (this._hintLabel) {\n      ids.push(this._hintLabelId);\n    }\n\n    if (endHint) {\n      ids.push(endHint.id);\n    }\n\n    this._mdInputChild.ariaDescribedby = ids.join(' ');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.mat-input-container]': 'true',\n    '[class.mat-input-invalid]': '_isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdInputContainer.prototype._parentForm;\n/** @type {?} */\nMdInputContainer.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core/errors/error';\n/**\n * \\@docs-private\n */\nexport class MdInputContainerPlaceholderConflictError extends MdError {\nconstructor() {\n    super('Placeholder attribute and child element were both specified.');\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerUnsupportedTypeError extends MdError {\n/**\n * @param {?} type\n */\nconstructor(type: string) {\n    super(`Input type \"${type}\" isn't supported by md-input-container.`);\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerDuplicatedHintError extends MdError {\n/**\n * @param {?} align\n */\nconstructor(align: string) {\n    super(`A hint was already declared for 'align=\"${align}\"'.`);\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerMissingMdInputError extends MdError {\nconstructor() {\n    super('md-input-container must contain an mdInput directive. Did you forget to add mdInput ' +\n          'to the native input or textarea element?');\n  }\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule} from '../core/compatibility/compatibility';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdProgressBarModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, CompatibilityModule],\n  exports: [MdProgressBar, CompatibilityModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-progress-bar]': 'true',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdProgressSpinnerModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    CompatibilityModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n      this._renderer.addClass(this._elementRef.nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2) { }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {HttpModule} from '@angular/http';\nimport {CompatibilityModule} from '../core';\nimport {MdIcon, ICON_REGISTRY_PROVIDER} from './icon';\nexport class MdIconModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdIconModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [HttpModule, CompatibilityModule],\n  exports: [MdIcon, CompatibilityModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon';\nexport {MdIconRegistry} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChange,\n  ViewEncapsulation,\n  AfterViewChecked,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdError} from '../core';\nimport {MdIconRegistry, MdIconNameNotFoundError} from './icon-registry';\n/**\n * Exception thrown when an invalid icon name is passed to an md-icon component.\n */\nexport class MdIconInvalidNameError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n      super(`Invalid icon name: \"${iconName}\"`);\n  }\n}\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon implements OnChanges, OnInit, AfterViewChecked {\nprivate _color: string;\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\n/**\n * Alt label to be used for accessibility.\n */\nalt: string;\n/**\n * Screenreader label for the icon.\n */\nhostAriaLabel: string = '';\n/**\n * Color of the icon.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\nprivate _previousAriaLabel: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _mdIconRegistry\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _mdIconRegistry: MdIconRegistry) { }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws MdIconInvalidNameError)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw new MdIconInvalidNameError(iconName);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: MdIconNameNotFoundError) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n    // Update aria label here because it may depend on the projected text content.\n    // (e.g. <md-icon>home</md-icon> should use 'home').\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nprivate _updateAriaLabel() {\n      const /** @type {?} */ ariaLabel = this._getAriaLabel();\n      if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n        this._previousAriaLabel = ariaLabel;\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n      }\n  }\n/**\n * @return {?}\n */\nprivate _getAriaLabel() {\n    // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n    // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n    // the text content of the directive.\n    const /** @type {?} */ label =\n        this.hostAriaLabel ||\n        this.alt ||\n        this.fontIcon ||\n        this._splitIconName(this.svgIcon)[1];\n    if (label) {\n      return label;\n    }\n    // The \"content\" of an SVG icon is not a useful label.\n    if (this._usingFontIcon()) {\n      const /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n      if (text) {\n        return text;\n      }\n    }\n    // TODO: Warn here in dev mode.\n    return null;\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.projectNodes(layoutElement, [svg]);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.setElementClass(elem, this._previousFontSetClass, false);\n      }\n      if (fontSetClass) {\n        this._renderer.setElementClass(elem, fontSetClass, true);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.setElementClass(elem, this._previousFontIconClass, false);\n      }\n      if (this.fontIcon) {\n        this._renderer.setElementClass(elem, this.fontIcon, true);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  host: {\n    'role': 'img',\n    '[class.mat-icon]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: MdIconRegistry, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n'alt': [{ type: Input },],\n'hostAriaLabel': [{ type: Input, args: ['aria-label', ] },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/** @type {?} */\nMdIcon.prototype._color;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/**\n * Alt label to be used for accessibility.\n * @type {?}\n */\nMdIcon.prototype.alt;\n/**\n * Screenreader label for the icon.\n * @type {?}\n */\nMdIcon.prototype.hostAriaLabel;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._previousAriaLabel;\n/** @type {?} */\nMdIcon.prototype._elementRef;\n/** @type {?} */\nMdIcon.prototype._renderer;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], Http, DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, SecurityContext} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {MdError} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/finally';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/observable/throw';\n/**\n * Exception thrown when attempting to load an icon with a name that cannot be found.\n * \\@docs-private\n */\nexport class MdIconNameNotFoundError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n    super(`Unable to find icon with the name \"${iconName}\"`);\n  }\n}\n/**\n * Exception thrown when attempting to load SVG content that does not contain the expected\n * <svg> tag.\n * \\@docs-private\n */\nexport class MdIconSvgTagNotFoundError extends MdError {\nconstructor() {\n    super('<svg> tag not found');\n  }\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Returns the cache key to use for an icon namespace and name.\n */\nconst iconKey = (namespace: string, name: string) => namespace + ':' + name;\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(private _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    if (this._iconSetConfigs.has(namespace)) {\n      this._iconSetConfigs.get(namespace).push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (this._cachedIconsByUrl.has(url)) {\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\n        .map(svg => cloneSvg(svg));\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an MdIconNameNotFoundError.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    if (this._svgIconConfigs.has(key)) {\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n    }\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return Observable.throw(new MdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return Observable.of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config)\n          .do(svg => config.svgElement = svg)\n          .map(svg => cloneSvg(svg));\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * MdIconNameNotFoundError if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return Observable.of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\n        .map(iconSetConfig =>\n            this._loadSvgIconSetFromConfig(iconSetConfig)\n                .catch((err: any, caught: Observable<SVGElement>): Observable<SVGElement> => {\n                  let /** @type {?} */ url =\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                  // Swallow errors fetching individual URLs so the combined Observable won't\n                  // necessarily fail.\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\n                  return Observable.of(null);\n                })\n                .do(svg => {\n                  // Cache SVG element.\n                  if (svg) {\n                    iconSetConfig.svgElement = svg;\n                  }\n                }));\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return Observable.forkJoin(iconSetFetchRequests)\n        .map((ignoredResults: any) => {\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n          if (!foundIcon) {\n            throw new MdIconNameNotFoundError(name);\n          }\n          return foundIcon;\n        });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url)\n        .map(svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n    if (!iconNode) {\n      return null;\n    }\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() == 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw new MdIconSvgTagNotFoundError();\n    }\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    if (this._inProgressUrlFetches.has(url)) {\n      return this._inProgressUrlFetches.get(url);\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\n        .map(response => response.text())\n        .finally(() => {\n          this._inProgressUrlFetches.delete(url);\n        })\n        .share()));\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip} from './chip';\nimport {MdChipInput} from './chip-input';\nimport {MdChipRemove} from './chip-remove';\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChip} from './chip';\nexport {MdChipInputEvent,MdChipInput} from './chip-input';\nexport {MdChipRemove} from './chip-remove';\nexport class MdChipsModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdChipsModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Renderer, ElementRef, OnInit, OnDestroy} from '@angular/core';\nimport {MdChip} from './chip';\nimport {Subscription} from 'rxjs';\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>clear</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove implements OnInit, OnDestroy {\n/**\n * Whether or not the remove icon is visible.\n */\n_isVisible: boolean = false;\n/**\n * Subscription for our onRemoveChange Observable\n */\n_onRemoveChangeSubscription: Subscription;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _parentChip\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef,\n              protected _parentChip: MdChip) {\n    if (this._parentChip) {\n      this._onRemoveChangeSubscription = this._parentChip.onRemovableChange$\n        .subscribe((value: boolean) => {\n          this._updateParent(value);\n        });\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._updateParent(true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._updateParent(false);\n    this._onRemoveChangeSubscription.unsubscribe();\n  }\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n/**\n * Informs the parent chip whether or not it contains a remove icon.\n * @param {?} isRemovable\n * @return {?}\n */\n_updateParent(isRemovable: boolean) {\n    this._isVisible = isRemovable;\n    this._parentChip._setHasRemoveIcon(isRemovable);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-chip-remove], [mat-chip-remove], [mdChipRemove], [matChipRemove]',\n  host: {\n    '[class.mat-chip-remove]': 'true',\n    '[class.mat-chip-remove-hidden]': '!_isVisible',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/**\n * Whether or not the remove icon is visible.\n * @type {?}\n */\nMdChipRemove.prototype._isVisible;\n/**\n * Subscription for our onRemoveChange Observable\n * @type {?}\n */\nMdChipRemove.prototype._onRemoveChangeSubscription;\n/** @type {?} */\nMdChipRemove.prototype._renderer;\n/** @type {?} */\nMdChipRemove.prototype._elementRef;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Output, EventEmitter, Renderer, ElementRef, Input} from '@angular/core';\nimport {ENTER} from '../core/keyboard/keycodes';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\nexport class MdChipInput {\n/**\n * Whether or not the chipAdded event will be emitted when the input is blurred.\n * \n * Default `false`.\n */\naddOnBlur = false;\n/**\n * The list of key codes that will trigger a chipAdded event.\n * \n * Defaults to `[ENTER]`.\n */\nseparatorKeys: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipAdded = new EventEmitter<MdChipInputEvent>();\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * \n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._add(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipAdded) event.\n * \n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._add();\n    }\n  }\n/**\n * Checks to see if the (chipAdded) event needs to be emitted.\n * \n * @param {?=} event\n * @return {?}\n */\n_add(event?: KeyboardEvent) {\n    if (!event || this.separatorKeys.indexOf(event.keyCode) > -1) {\n      this.chipAdded.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipInput], [matChipInput]',\n  host: {\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'addOnBlur': [{ type: Input },],\n'separatorKeys': [{ type: Input },],\n'chipAdded': [{ type: Output },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/**\n * Whether or not the chipAdded event will be emitted when the input is blurred.\n * \n * Default `false`.\n * @type {?}\n */\nMdChipInput.prototype.addOnBlur;\n/**\n * The list of key codes that will trigger a chipAdded event.\n * \n * Defaults to `[ENTER]`.\n * @type {?}\n */\nMdChipInput.prototype.separatorKeys;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipAdded;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._renderer;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  QueryList,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {\n  LEFT_ARROW, RIGHT_ARROW, BACKSPACE, DELETE, UP_ARROW, DOWN_ARROW\n} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit {\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _destroyedIndex: number = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Holds our current input if provided.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * Whether or not the chip list is currently focusable via keyboard interaction.\n */\n_tabIndex = -1;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef,\n              protected _dir: Dir) {\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // Make sure we set our tab index at the start\n    this._checkTabIndex();\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n\n      // If we have 0 chips, attempt to focus an input (if available)\n      if (chips.length == 0) {\n        this.focusInput();\n      }\n\n      // Check to see if we need to update our tab index\n      this._checkTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._checkDestroyedFocus();\n    });\n  }\n/**\n * Associates an HTML input element with this chip list.\n * \n * @param {?} inputElement The input to associate.\n * @return {?}\n */\nregisterInput(inputElement: HTMLInputElement) {\n    this._inputElement = inputElement;\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first non-disabled chip in this\n * chip list, or the input if available and there are 0 chips.\n * \n * TODO: ARIA says this should focus the first `selected` chip if any are selected.\n * @param {?=} event\n * @return {?}\n */\nfocus(event?: Event) {\n    if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this.focusInput();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\nfocusInput() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = MdChipList._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code == (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code == (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code == BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    let /** @type {?} */ isForwardKey = (code == DOWN_ARROW || isNextKey);\n\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on an empty input and hit the right arrow, wrap focus to the first chip\n    if (isInputEmpty && isForwardKey) {\n      this._keyManager.setFirstItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList < MdChip >): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _checkTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = (this.chips.length == 0 ? -1 : 0);\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and setup our destroyed focus check\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex) && this._keyManager.activeItemIndex == chipIndex) {\n        this._destroyedIndex = chipIndex;\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _checkDestroyedFocus() {\n    let /** @type {?} */ chipsArray = this.chips.toArray();\n    let /** @type {?} */ focusChip: MdChip;\n\n    if (this._destroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      if (this._destroyedIndex >= chipsArray.length) {\n        this._keyManager.setActiveItem(chipsArray.length - 1);\n      } else if (this._destroyedIndex >= 0) {\n        this._keyManager.setActiveItem(this._destroyedIndex);\n      }\n\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._destroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * Utility to check if an input element has no value.\n * @param {?} element\n * @return {?}\n */\nprivate static _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() == 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return input.value == '' || input.value == null;\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    'role': 'listbox',\n    '[class.mat-chip-list]': 'true',\n\n    '[attr.tabindex]': '_tabIndex',\n\n    '(focus)': 'focus($event)',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: Dir, },\n];\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._destroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Holds our current input if provided.\n * @type {?}\n */\nMdChipList.prototype._inputElement;\n/**\n * Whether or not the chip list is currently focusable via keyboard interaction.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer\n} from '@angular/core';\n\nimport {Observable} from 'rxjs/Observable';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, BACKSPACE, DELETE} from '../core/keyboard/keycodes';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip implements Focusable, OnInit, OnDestroy {\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n */\nprotected _disabled: boolean = null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether or not the chip is removable.\n */\nprotected _removable: boolean = true;\n/**\n * Whether or not the chip is selected.\n */\nprotected _selected: boolean = false;\n/**\n * The palette color of selected chips.\n */\nprotected _color: string = 'primary';\n/**\n * Whether or not the chip is displaying the remove icon.\n */\n_hasRemoveIcon: boolean = false;\n/**\n * Emitted when the removable property changes.\n */\nprivate _onRemovableChange = new EventEmitter<boolean>();\n  onRemovableChange$: Observable<boolean> = this._onRemovableChange.asObservable();\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef) {\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._addDefaultCSSClass();\n    this._updateColor(this._color);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Whether or not the chip is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * Sets the disabled state of the chip.\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n/**\n * A String representation of the current disabled state.\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n    this._onRemovableChange.emit(this._removable);\n  }\n/**\n * Whether or not this chip is selected.\n * @return {?}\n */\nget selected(): boolean {\n    return this._selected;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n\n    if (this._selected) {\n      this.select.emit({chip: this});\n    } else {\n      this.deselect.emit({chip: this});\n    }\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?}\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * The color of the chip. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Note: This only informs any listeners of the removal request, it does **not** actually remove\n * the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this._checkDisabled(event)) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this._checkDisabled(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        if (this.removable) {\n          this.onRemove.emit();\n        }\n\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected();\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * Sets whether or not this chip is displaying a remove icon. Adds/removes the\n * `md-chip-has-remove-icon` class.\n * @param {?} value\n * @return {?}\n */\n_setHasRemoveIcon(value: boolean) {\n    this._hasRemoveIcon = value;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprotected _checkDisabled(event: Event): boolean {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    return this.disabled;\n  }\n/**\n * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n * @return {?}\n */\nprivate _addDefaultCSSClass() {\n    let /** @type {?} */ el: HTMLElement = this._elementRef.nativeElement;\n\n    // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n    if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n        el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n      el.classList.add('mat-basic-chip');\n    }\n  }\n/**\n * Updates the private _color variable and the native element.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the mat-color on the native element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  template: `<ng-content></ng-content><div class=\"md-chip-focus-border\"></div>`,\n  host: {\n    '[class.mat-chip]': 'true',\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-has-remove-icon]': '_hasRemoveIcon',\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n'disabled': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selected': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n * @type {?}\n */\nMdChip.prototype._disabled;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChip.prototype._selectable;\n/**\n * Whether or not the chip is removable.\n * @type {?}\n */\nMdChip.prototype._removable;\n/**\n * Whether or not the chip is selected.\n * @type {?}\n */\nMdChip.prototype._selected;\n/**\n * The palette color of selected chips.\n * @type {?}\n */\nMdChip.prototype._color;\n/**\n * Whether or not the chip is displaying the remove icon.\n * @type {?}\n */\nMdChip.prototype._hasRemoveIcon;\n/**\n * Emitted when the removable property changes.\n * @type {?}\n */\nMdChip.prototype._onRemovableChange;\n/** @type {?} */\nMdChip.prototype.onRemovableChange$;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._renderer;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCardModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    CompatibilityModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {\n    '[class.mat-card-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title]',\n  host: {\n    '[class.mat-card-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle]',\n  host: {\n    '[class.mat-card-subtitle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    '[class.mat-card-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {\n    '[class.mat-card-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image]',\n  host: {\n    '[class.mat-card-sm-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image]',\n  host: {\n    '[class.mat-card-md-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image]',\n  host: {\n    'class.mat-card-lg-image': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image]',\n  host: {\n    '[class.mat-card-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image]',\n  host: {\n    '[class.mat-card-xl-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar]',\n  host: {\n    '[class.mat-card-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-title-group]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule, CompatibilityModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdGridListModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, CompatibilityModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    CompatibilityModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {MdGridListColsError} from './grid-list-errors';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw new MdGridListColsError();\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    '[class.mat-grid-list]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {MdGridListBadRatioError} from './grid-list-errors';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nexport class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number, gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw new MdGridListBadRatioError(value);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","import {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {MdGridTileTooWideError} from './grid-list-errors';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw new MdGridTileTooWideError(tileCols, this.tracker.length);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","import {MdError} from '../core';\n/**\n * Exception thrown when cols property is missing from grid-list\n * \\@docs-private\n */\nexport class MdGridListColsError extends MdError {\nconstructor() {\n    super(`md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">`);\n  }\n}\n/**\n * Exception thrown when a tile's colspan is longer than the number of cols in list\n * \\@docs-private\n */\nexport class MdGridTileTooWideError extends MdError {\n/**\n * @param {?} cols\n * @param {?} listLength\n */\nconstructor(cols: number, listLength: number) {\n    super(`md-grid-list: tile with colspan ${cols} is wider than grid with cols=\"${listLength}\".`);\n  }\n}\n/**\n * Exception thrown when an invalid ratio is passed in as a rowHeight\n * \\@docs-private\n */\nexport class MdGridListBadRatioError extends MdError {\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n  }\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Renderer,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setElementStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    '[class.mat-grid-tile]': 'true',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar]',\n  host: {\n    '[class.mat-grid-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {\n    '[class.mat-grid-tile-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {\n    '[class.mat-grid-tile-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule, MdRippleModule, CompatibilityModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdListModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, CompatibilityModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    CompatibilityModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  ContentChildren,\n  ContentChild,\n  QueryList,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  Renderer,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdLine, MdLineSetter, coerceBooleanProperty} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {\n    'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {\n    '[class.mat-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {\n    '[class.mat-nav-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    '[class.mat-divider]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar]',\n  host: {\n    '[class.mat-list-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon]',\n  host: {\n    '[class.mat-list-icon]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {\n    '[class.mat-subheader]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n\n  _hasFocus: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    this._renderer.setElementClass(\n        this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._hasFocus = false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '[class.mat-list-item]': 'true',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._hasFocus;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSidenavModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, CompatibilityModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport {Dir, MdError, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\n/**\n * Exception thrown when two MdSidenav are matching the same side.\n */\nexport class MdDuplicatedSidenavError extends MdError {\n/**\n * @param {?} align\n */\nconstructor(align: string) {\n    super(`A sidenav was already declared for 'align=\"${align}\"'`);\n  }\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _renderer\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    this.onOpen.subscribe(() => {\n      this._elementFocusedBeforeSidenavWasOpened = document.activeElement as HTMLElement;\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._renderer.invokeElementMethod(this._elementFocusedBeforeSidenavWasOpened, 'focus');\n      } else {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'blur');\n      }\n\n      this._elementFocusedBeforeSidenavWasOpened = null;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    '[class.mat-sidenav]': 'true',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._renderer;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(sidenav, true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(sidenav, false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} sidenav\n * @param {?} bool\n * @return {?}\n */\nprivate _setContainerClass(sidenav: MdSidenav, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throw new MdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throw new MdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    '[class.mat-sidenav-container]': 'true',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {CompatibilityModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSliderModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, CompatibilityModule, StyleModule, RtlModule],\n  exports: [MdSlider, CompatibilityModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider implements ControlValueAccessor, OnDestroy {\n/**\n * Whether or not the slider is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\nprivate _disabled: boolean = false;\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer = null;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number = null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number = null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-slider]': 'true',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._disabled;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  GestureConfig, CompatibilityModule, MdRippleModule, FOCUS_ORIGIN_MONITOR_PROVIDER\n} from '../core';\nexport class MdSlideToggleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSlideToggleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, CompatibilityModule],\n  exports: [MdSlideToggle, CompatibilityModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  Renderer,\n  forwardRef,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  AfterContentInit,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  HammerInput,\n  FocusOriginMonitor,\n  FocusOrigin,\n  MdRipple,\n  RippleRef\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\n/**\n * Two-state control, which can be also called `switch`.\n */\nexport class MdSlideToggle implements OnDestroy, AfterContentInit, ControlValueAccessor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _color: string;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _disabled: boolean = false;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * The color of the slide-toggle. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    '[class.mat-slide-toggle]': 'true',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._color;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._disabled;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._elementRef;\n/** @type {?} */\nMdSlideToggle.prototype._renderer;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdOptionModule} from '../core/option/option';\nimport {CompatibilityModule, OverlayModule} from '../core';\nexport class MdSelectModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSelectModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    CompatibilityModule,\n  ],\n  exports: [MdSelect, MdOptionModule, CompatibilityModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {MdSelectDynamicMultipleError, MdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n/**\n * The fixed height of every option element.\n */\nexport const SELECT_OPTION_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED = 5;\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n\n/** Allowed values for the floatPlaceholder option. */\nexport type MdSelectFloatPlaceholderType = 'always' | 'never' | 'auto';\nexport class MdSelect implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Subscription to global scrolled events while the select is open.\n */\nprivate _scrollSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * Whether the select is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Theme color for the component.\n */\nprivate _color: string;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw new MdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): MdSelectFloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: MdSelectFloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: MdSelectFloatPlaceholderType = 'auto';\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Theme color for the component.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value && value !== this._color) {\n      this._renderer.removeClass(this._element.nativeElement, `mat-${this._color}`);\n      this._renderer.addClass(this._element.nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _scrollDispatcher\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n */\nconstructor(private _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _dir: Dir,\npublic _control: NgControl,\n               tabIndex: string) {\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n    this.color = this.color || 'primary';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n      this.overlayDir.overlayRef.updatePosition();\n    });\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n        this._scrollSubscription = null;\n      }\n\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Ensures the panel opens if activated by the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this.open();\n    } else if (!this.disabled) {\n      let /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      let /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (this._multiple) {\n        this.open();\n      } else if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[]): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw new MdSelectNonArrayValueError();\n    }\n\n    if (isArray) {\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else if (!this._selectValue(value)) {\n      this._clearSelection();\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any): MdOption {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => option.value === value);\n\n    if (correspondingOption) {\n      correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option);\n      this._selectionModel.select(option);\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @return {?}\n */\nprivate _propagateChanges(): void {\n    let /** @type {?} */ valueToEmit = Array.isArray(this.selected) ?\n      this.selected.map(option => option.value) :\n      this.selected.value;\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._element.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ panelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      const /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `visibility` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderVisibility(): 'visible'|'hidden' {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        'visible' : 'hidden';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    let /** @type {?} */ offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX\n        - (isRtl ? SELECT_PANEL_PADDING_X * 2 : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n        + (isRtl ? 0 : SELECT_PANEL_PADDING_X * 2);\n\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select]': 'true',\n    '(keydown)': '_handleKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: ScrollDispatcher, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'color': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Subscription to global scrolled events while the select is open.\n * @type {?}\n */\nMdSelect.prototype._scrollSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * Whether the select is disabled.\n * @type {?}\n */\nMdSelect.prototype._disabled;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Theme color for the component.\n * @type {?}\n */\nMdSelect.prototype._color;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._element;\n/** @type {?} */\nMdSelect.prototype._renderer;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._scrollDispatcher;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core/errors/error';\n/**\n * Exception thrown when attempting to change a select's `multiple` option after initialization.\n * \\@docs-private\n */\nexport class MdSelectDynamicMultipleError extends MdError {\nconstructor() {\n    super('Cannot change `multiple` mode of select after initialization.');\n  }\n}\n/**\n * Exception thrown when attempting to assign a non-array value to a select in `multiple` mode.\n * Note that `undefined` and `null` are still valid values to allow for resetting the value.\n * \\@docs-private\n */\nexport class MdSelectNonArrayValueError extends MdError {\nconstructor() {\n    super('Cannot assign truthy non-array value to select in `multiple` mode.');\n  }\n}\n","import {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: `scale(0.75)`\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: `scale(0.75)`\n  })),\n  transition('* => *', animate(`400ms cubic-bezier(0.25, 0.8, 0.25, 1)`))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width 32px, scales it up to\n * 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: `scaleY(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: `scaleY(0)`\n    }),\n    animate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata  =  trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","import {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB, HOME, END} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut = new Subject<void>();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case HOME:\n        this.setFirstItemActive();\n        break;\n      case END:\n        this.setLastItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  CompatibilityModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdRadioModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, CompatibilityModule],\n  exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * Disables all individual radio buttons assigned to this group.\n */\nprivate _disabled: boolean = false;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    '[class.mat-radio-group]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * Disables all individual radio buttons assigned to this group.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype.labelPosition;\n}\n\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton implements OnInit, AfterViewInit, OnDestroy {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-radio-button]': 'true',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._elementRef;\n/** @type {?} */\nMdRadioButton.prototype._renderer;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule, CompatibilityModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCheckboxModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, CompatibilityModule],\n  exports: [MdCheckbox, CompatibilityModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {\n  MdRipple,\n  RippleRef,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox implements ControlValueAccessor, AfterViewInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\nprivate _disabled: boolean = false;\n/**\n * Whether the checkbox is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n\n   _ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _color: string;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.color = 'accent';\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    '[class.mat-checkbox]': 'true',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/** @type {?} */\nMdCheckbox.prototype._disabled;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/** @type {?} */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._color;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._renderer;\n/** @type {?} */\nMdCheckbox.prototype._elementRef;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdButtonCssMatStyler,\n  MdFabCssMatStyler,\n  MdIconButtonCssMatStyler,\n  MdMiniFabCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdButtonModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    CompatibilityModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    CompatibilityModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {\n    '[class.mat-button]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {\n    '[class.mat-raised-button]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {\n    '[class.mat-icon-button]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {\n    '[class.mat-fab]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFabCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdMiniFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {\n    '[class.mat-mini-fab]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMiniFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFabCssMatStyler.ctorParameters;\n}\n\nexport class MdButtonBase { }\nexport const /** @type {?} */ _MdButtonMixinBase = mixinDisabled(MdButtonBase);\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable {\nprivate _color: string;\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._getHostElement(), `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  inputs: ['disabled'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/** @type {?} */\nMdButton.prototype._color;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._elementRef;\n/** @type {?} */\nMdButton.prototype._renderer;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} focusOriginMonitor\n */\nconstructor(elementRef: ElementRef, renderer: Renderer, focusOriginMonitor: FocusOriginMonitor) {\n    super(elementRef, renderer, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {coerceBooleanProperty} from '../coercion/boolean-property';\n\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  CompatibilityModule,\n  FocusOriginMonitor,\n} from '../core';\nexport class MdButtonToggleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdButtonToggleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, CompatibilityModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    CompatibilityModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    'role': 'radiogroup',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = null;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/option';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule, MdOption} from './option/option';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay, OVERLAY_PROVIDERS} from './overlay/overlay';\nexport {OverlayContainer} from './overlay/overlay-container';\nexport {FullscreenOverlayContainer} from './overlay/fullscreen-overlay-container';\nexport {OverlayRef} from './overlay/overlay-ref';\nexport {OverlayState} from './overlay/overlay-state';\nexport {\n  ConnectedOverlayDirective,\n  OverlayOrigin,\n  OverlayModule,\n} from './overlay/overlay-directives';\nexport {GlobalPositionStrategy} from './overlay/position/global-position-strategy';\nexport {ElementBoundingPositions,ConnectedPositionStrategy} from './overlay/position/connected-position-strategy';\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './overlay/position/connected-position';\nexport {ScrollDispatcher} from './overlay/scroll/scroll-dispatcher';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Error\nexport {MdError} from './errors/error';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,COMMA,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\nexport class MdCoreModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCoreModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer,\n  SkipSelf\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(element: Element, renderer: Renderer, checkChildren: boolean): Observable<FocusOrigin> {\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: Element): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} renderer The renderer to use to invoke the focus method on the element.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: Node, renderer: Renderer, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    renderer.invokeElementMethod(element, 'focus');\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: Element, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    renderer.setElementClass(element, 'cdk-focused', !!origin);\n    renderer.setElementClass(element, 'cdk-touch-focused', origin === 'touch');\n    renderer.setElementClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n    renderer.setElementClass(element, 'cdk-mouse-focused', origin === 'mouse');\n    renderer.setElementClass(element, 'cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: Element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: Element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusOriginMonitor,\n                                                      ngZone: NgZone) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","import {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: A11yModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PlatformModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","let /** @type {?} */ supportedInputTypes: Set<string>;\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  if (!supportedInputTypes) {\n    let /** @type {?} */ featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set([\n      // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n      // first changing it to something else:\n      // The specified value \"\" does not conform to the required format.\n      // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n      'color',\n      'button',\n      'checkbox',\n      'date',\n      'datetime-local',\n      'email',\n      'file',\n      'hidden',\n      'image',\n      'month',\n      'number',\n      'password',\n      'radio',\n      'range',\n      'reset',\n      'search',\n      'submit',\n      'tel',\n      'text',\n      'time',\n      'url',\n      'week',\n    ].filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }));\n  }\n  return supportedInputTypes;\n}\n","import {\n  Injectable,\n  OpaqueToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN  = new OpaqueToken('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n */\nconstructor(  elementToken: any) {\n\n    // We inject the live element as `any` because the constructor signature cannot reference\n    // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n    // causes TypeScript to preserve the constructor signature types.\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher: LiveAnnouncer, liveElement: any) {\n  return parentDispatcher || new LiveAnnouncer(liveElement);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)]\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n    });\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusFirstTabbableElement());\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusLastTabbableElement());\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-start]') as HTMLElement)) ||\n                            this._getFirstTabbableElement(this._element);\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\n    let /** @type {?} */ focusTargets = this._element.querySelectorAll('[cdk-focus-end]');\n    let /** @type {?} */ redirectToElement: HTMLElement = null;\n\n    if (focusTargets.length) {\n      redirectToElement = /** @type {?} */(( focusTargets[focusTargets.length - 1] as HTMLElement));\n    } else {\n      redirectToElement = this._getLastTabbableElement(this._element);\n    }\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _ngZone\n */\nconstructor(private _checker: InteractivityChecker,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n\ndeclare const window: any;\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = typeof(window) !== 'undefined' ?\n    (window.Intl && ( /** @type {?} */((window.Intl as any))).v8BreakIterator) :\n    (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n/**\n * Layout Engines\n */\nEDGE = /(edge)/i.test(navigator.userAgent);\n  TRIDENT = /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.\n  BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to\n  // ensure that Webkit runs standalone and is not use as another engines base.\n  WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    ModuleWithProviders,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _open = false;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * @return {?}\n */\nget open() {\n    return this._open;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset open(value: boolean) {\n    value ? this._attachOverlay() : this._detachOverlay();\n    this._open = value;\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'open': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._open;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: OverlayModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll/scroll-dispatcher';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {}\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  SCROLL_DISPATCHER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","import {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\nexport type ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayPoint);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, fallbackPoint);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayPoint);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayPoint\n * @return {?}\n */\nprivate _setElementPosition(element: HTMLElement, overlayPoint: Point) {\n    element.style.left = overlayPoint.x + 'px';\n    element.style.top = overlayPoint.y + 'px';\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) { }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    return this._portalHost.detach();\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","import {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","import {\n    NgModule,\n    ModuleWithProviders,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PortalModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    NullPortalHostError,\n    PortalAlreadyAttachedError,\n    NoPortalAttachedError,\n    NullPortalError,\n    PortalHostAlreadyDisposedError,\n    UnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throw new NullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throw new NoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: () => void;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throw new NullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throw new PortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throw new UnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","import {MdError} from '../errors/error';\n/**\n * Exception thrown when attempting to attach a null portal to a host.\n * \\@docs-private\n */\nexport class NullPortalError extends MdError {\nconstructor() {\n      super('Must provide a portal to attach');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n */\nexport class PortalAlreadyAttachedError extends MdError {\nconstructor() {\n      super('Host already has a portal attached');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n */\nexport class PortalHostAlreadyDisposedError extends MdError {\nconstructor() {\n      super('This PortalHost has already been disposed');\n  }\n}\n/**\n * Exception thrown when attempting to attach an unknown portal type.\n * \\@docs-private\n */\nexport class UnknownPortalTypeError extends MdError {\nconstructor() {\n      super(\n        'Attempting to attach an unknown Portal type. ' +\n        'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to a null host.\n * \\@docs-private\n */\nexport class NullPortalHostError extends MdError {\nconstructor() {\n      super('Attempting to attach a portal to a null PortalHost');\n  }\n}\n/**\n * Exception thrown when attempting to detach a portal that is not attached.\n * \\@docs-private\n */\nexport class NoPortalAttachedError extends MdError {\nconstructor() {\n      super('Attempting to detach a portal that is not attached to a host');\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ModuleWithProviders,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdOptionModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.setElementClass(nativeElement, `mat-${this.color}`, false);\n      this._renderer.setElementClass(nativeElement, `mat-${value}`, true);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {CompatibilityModule} from '../compatibility/compatibility';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {SCROLL_DISPATCHER_PROVIDER} from '../overlay/scroll/scroll-dispatcher';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdRippleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdRipple, CompatibilityModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  OpaqueToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef} from './ripple-ref';\n/**\n * OpaqueToken that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS = new OpaqueToken('md-ripple-global-options');\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    '[class.mat-ripple]': 'true',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Initially cache the document rectangle.\n    this._cacheViewportGeometry();\n\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, ElementRef, Optional, SkipSelf, NgZone} from '@angular/core';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher,\n                                                   ngZone: NgZone) {\n  return parentDispatcher || new ScrollDispatcher(ngZone);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ElementRef, NgZone} from '@angular/core';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n */\nconstructor(_elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler) {\n    this._containerElement = _elementRef.nativeElement;\n\n    // Specify events which need to be registered on the trigger.\n    this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n    this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n    this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n    // By default use the host element as trigger element.\n    this.setTriggerElement(this._containerElement);\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","import {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\nexport const /** @type {?} */ COMMA = 188;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","import {\n  Directive,\n  ElementRef,\n  NgModule,\n  ModuleWithProviders,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit\n} from '@angular/core';\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._observer = new MutationObserver(mutations => mutations.forEach(() => this.event.emit()));\n\n    this._observer.observe(this._elementRef.nativeElement, {\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ObserveContentModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n/**\n * Layout direction of the element.\n */\n_dir: LayoutDirection = 'ltr';\n/**\n * Event emitted when the direction changes.\n */\ndirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    Directive,\n    Renderer,\n    ElementRef,\n    QueryList\n} from '@angular/core';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line]',\n  host: {\n    '[class.mat-line]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} bool\n * @return {?}\n */\nprivate _setClass(className: string, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, className, bool);\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdLine, CompatibilityModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  OpaqueToken,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {MdError} from '../errors/error';\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nlet hasDoneGlobalChecks = false;\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\n/**\n * Exception thrown if the consumer has used an invalid Material prefix on a component.\n * \\@docs-private\n */\nexport class MdCompatibilityInvalidPrefixError extends MdError {\n/**\n * @param {?} prefix\n * @param {?} nodeName\n */\nconstructor(prefix: string, nodeName: string) {\n    super(\n      `The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n      `It was used on an \"${nodeName.toLowerCase()}\" element.`\n    );\n  }\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-card-subtitle],\n  [mat-card-title],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-card-subtitle],\n  [md-card-title],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CompatibilityModule,\n      providers: [],\n    };\n  }\n/**\n * @param {?} _document\n */\nconstructor(\nprivate _document: any) {\n    if (!hasDoneGlobalChecks && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n/** @type {?} */\nCompatibilityModule.prototype._document;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Wrapper around Error that sets the error message.\n * \\@docs-private\n */\nexport class MdError extends Error {\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this.message = value;\n  }\n}\n"],"names":["_applyConfigDefaults","nextId","state","nextUniqueId","clamp","animate","style","_uniqueIdCounter"],"mappings":"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"}