{"version":3,"file":"material.umd.js","sources":["../../src/lib/index.ts","../../src/lib/module.ts","../../src/lib/paginator/index.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/sort/index.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/table/index.ts","../../src/lib/table/row.ts","../../src/lib/table/cell.ts","../../src/lib/table/table.ts","../../src/lib/expansion/index.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/index.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core/core.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/index.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/overlay/scroll/scroll-strategy-options.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/version.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {VERSION,coerceBooleanProperty,coerceNumberProperty,ObserversModule,ObserveContent,Dir,Direction,Directionality,BidiModule,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,MD_ERROR_GLOBAL_OPTIONS,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdPaginatorModule,PageEvent,MdPaginator,MdPaginatorIntl,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MdTableModule,_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MdRowDef,MdHeaderRow,MdRow,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroupBase,_MdTabGroupMixinBase,MdTabGroup,MdTabNavBase,_MdTabNavMixinBase,MdTabLinkBase,_MdTabLinkMixinBase,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {mixinColor as ɵbd} from './core/common-behaviors/color';\nexport {mixinDisableRipple as ɵbe} from './core/common-behaviors/disable-ripple';\nexport {mixinDisabled as ɵbc} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵk} from './core/coordination/unique-selection-dispatcher';\nexport {MdDateFormats as ɵbf} from './core/datetime/date-formats';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './core/overlay/overlay-container';\nexport {MD_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd} from './core/overlay/overlay-directives';\nexport {OverlayPositionBuilder as ɵbb} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵg,VIEWPORT_RULER_PROVIDER_FACTORY as ɵf} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵi,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵh} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵj} from './core/ripple/ripple-renderer';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵl} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵn,MdGridTileFooterCssMatStyler as ɵp,MdGridTileHeaderCssMatStyler as ɵo,MdGridTileText as ɵm} from './grid-list/grid-tile';\nexport {MdMenuItemBase as ɵq,_MdMenuItemMixinBase as ɵr} from './menu/menu-item';\nexport {MD_MENU_SCROLL_STRATEGY as ɵs,MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵu,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵt} from './menu/menu-trigger';\nexport {MdTabBase as ɵz,_MdTabMixinBase as ɵba} from './tabs/tab';\nexport {MdTabHeaderBase as ɵv,_MdTabHeaderMixinBase as ɵw} from './tabs/tab-header';\nexport {MdTabLabelWrapperBase as ɵx,_MdTabLabelWrapperMixinBase as ɵy} from './tabs/tab-label-wrapper';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  BidiModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserversModule,\n  OverlayModule,\n  PortalModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {MdExpansionModule} from './expansion/index';\nimport {MdTableModule} from './table/index';\nimport {MdSortModule} from './sort/index';\nimport {MdPaginatorModule} from './paginator/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdTableModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdPaginatorModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdSortModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  BidiModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserversModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdButtonModule} from '../button/index';\nimport {MdSelectModule} from '../select/index';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MdTooltipModule} from '../tooltip/index';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\n\nexport {PageEvent,MdPaginator} from './paginator';\nexport {MdPaginatorIntl} from './paginator-intl';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MdPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  providers: [\n    {provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/** @type {?} */\nMdPaginator.prototype._intlChanges;\n/** @type {?} */\nMdPaginator.prototype._pageIndex;\n/** @type {?} */\nMdPaginator.prototype._length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n/** @type {?} */\nMdPaginator.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\nexport {SortDirection} from './sort-direction';\nexport {MdSortHeader} from './sort-header';\nexport {MdSortHeaderIntl} from './sort-header-intl';\nexport {MdSortable,Sort,MdSort} from './sort';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.mdSortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {SortDirection} from './sort-direction';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nmdSortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.mdSortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'mdSortChange': [{ type: Output },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.mdSortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MdCell, MdHeaderCell, MdCellDef, MdHeaderCellDef, MdColumnDef} from './cell';\nimport {MdHeaderRow, MdRow, MdHeaderRowDef, MdRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\n\nexport {_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell} from './cell';\nexport {_MdTable,MdTable} from './table';\nexport {_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MdRowDef,MdHeaderRow,MdRow} from './row';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n  declarations: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Directive} from '@angular/core';\nimport {\n  CdkHeaderRow,\n  CdkRow,\n  CDK_ROW_TEMPLATE,\n  CdkRowDef,\n  CdkHeaderRowDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MdCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header row definition for the md-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MdHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderRowDef], [matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef}],\n  inputs: ['columns: mdHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the md-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class MdRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdRowDef], [matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MdRowDef}],\n  inputs: ['columns: mdRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdCellDef], [matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\n * Defines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdColumnDef], [matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, StyleModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule, StyleModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\nimport {filter} from '../core/rxjs/index';\nimport {FocusOriginMonitor} from '../core/style/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription: Subscription | null = null;\n/**\n * @param {?} panel\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic panel: MdExpansionPanel,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!changes.hideToggle)\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusOriginMonitor.monitor(_element.nativeElement, _renderer, false);\n  }\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    this.panel.toggle();\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator is hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    return this.panel.hideToggle;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n      this._parentChangeSubscription = null;\n    }\n\n    this._focusOriginMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    'tabindex': '0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px'})),\n      state('expanded', style({height: '64px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._renderer;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusOriginMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem implements OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState | 'void' {\n    if (this.accordion) {\n      return this.expanded ? this.accordion.displayMode : this._getExpandedState();\n    }\n\n    return 'void';\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('flat, collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordionChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordionChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordionChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordionChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordionChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordionChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordionChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {A11yModule, OverlayModule, StyleModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {\n  MdDatepicker,\n  MdDatepickerContent,\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {MdIconModule} from '../icon/index';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    MdIconModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nexport class MdDatepickerToggle<D> implements OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n */\nconstructor(public _intl: MdDatepickerIntl, changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._intlChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._getValidDateOrNull(this._dateAdapter.parse(\n        this._elementRef.nativeElement.value, this._dateFormats.parse.dateInput));\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    if (value != null && !this._dateAdapter.isDateInstance(value)) {\n      throw Error('Datepicker: value not recognized as a date object by DateAdapter.');\n    }\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'mdDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core/overlay/index';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {Directionality} from '../core/bidi/index';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport {first} from '../core/rxjs/index';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = date; }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen && 'focus' in this._focusedElementBeforeOpen) {\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable).subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {first} from '../core/rxjs/index';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D | null;\n/**\n * The minimum selectable date.\n */\nminDate: D | null;\n/**\n * The maximum selectable date.\n */\nmaxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => first.call(this._ngZone.onStable).subscribe(() => {\n      this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n  InjectionToken,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  TemplatePortal,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Directionality} from '../core/bidi/index';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {RxChain, switchMap, first, filter, map} from '../core/rxjs/index';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ inputContainer = this._inputContainer ?\n          this._inputContainer._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!inputContainer || !inputContainer.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable);\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used in a Material container, we should set it through\n    // the property so it can go through the change detection.\n    if (this._inputContainer) {\n      this._inputContainer._mdInputChild.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._inputContainer ? this._inputContainer._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n            'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n   _mdDialogClose: any;\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\n        changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injector,\n  ComponentRef,\n  Injectable,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n  BlockScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\nimport {defer} from 'rxjs/observable/defer';\nimport {startWith} from '../core/rxjs/index';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _scrollStrategy\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _scrollStrategy,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */(( null))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport {RxChain, first, filter} from '../core/rxjs/index';\n\n\n// TODO(jelbourn): resizing\n// TODO(jelbourn): afterOpen and beforeClose\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\n\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => this._overlayRef.detachBackdrop());\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '../core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n  providers: [\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MD_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewContainerRef,\n  Self,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  isFakeMousedownFromScreenReader,\n  Directionality,\n  Direction,\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  TemplatePortal,\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  VerticalConnectionPos,\n  RIGHT_ARROW,\n  LEFT_ARROW,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {RxChain, filter} from '../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _hoverSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n        .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n        .subscribe(() => {\n          this._openedByMouse = true;\n          this.openMenu();\n        });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this._resetMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\n * mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition();\n    overlayState.hasBackdrop = !this.triggersSubmenu();\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n      .withDirection(this.dir)\n      .withOffsetY(offsetY)\n      .withFallbackPosition(\n          {originX: originFallbackX, originY},\n          {overlayX: overlayFallbackX, overlayY})\n      .withFallbackPosition(\n          {originX, originY: originFallbackY},\n          {overlayX, overlayY: overlayFallbackY})\n      .withFallbackPosition(\n          {originX: originFallbackX, originY: originFallbackY},\n          {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    [\n      this._closeSubscription,\n      this._positionSubscription,\n      this._hoverSubscription\n    ]\n    .filter(subscription => !!subscription)\n    .forEach(subscription => subscription.unsubscribe());\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n      .call(filter, active => active !== this._menuItemInstance)\n      .call(filter, () => this._menuOpen)\n      .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n        (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n        (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n        this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '../core';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return merge(...this.items.map(item => item.hover));\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ElementRef, OnDestroy, ChangeDetectionStrategy} from '@angular/core';\nimport {FocusableOption} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent, MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Directionality} from '../core/bidi/index';\nimport {Platform} from '../core/platform/index';\nimport {first} from '../core/rxjs/index';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    this._setTooltipMessage(this._message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.panelClass = TOOLTIP_PANEL_CLASS;\n    config.scrollStrategy = this._scrollStrategy();\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNav, MdTabLink} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdCommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdCommonModule,\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroupBase,_MdTabGroupMixinBase,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport {\n  RIGHT_ARROW,\n  LEFT_ARROW,\n  ENTER,\n  Directionality,\n  Direction,\n} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {auditTime, startWith} from '../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MdTabHeaderBase {}\nexport const /** @type {?} */ _MdTabHeaderMixinBase = mixinDisableRipple(MdTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader extends _MdTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription | null = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * subscription for the window resize handler\n */\nprivate _resizeSubscription: Subscription | null;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\n              platform: Platform) {\n    super();\n\n    if (platform.isBrowser) {\n      // TODO: Add library level window listener https://goo.gl/y25X5M\n      this._resizeSubscription = RxChain.from(fromEvent(window, 'resize'))\n        .call(debounceTime, 150)\n        .subscribe(() => this._checkPaginationEnabled());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return startWith.call(merge(dirChange, resize), null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n\n    if (this._resizeSubscription) {\n      this._resizeSubscription.unsubscribe();\n      this._resizeSubscription = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * subscription for the window resize handler\n * @type {?}\n */\nMdTabHeader.prototype._resizeSubscription;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Directionality, Direction} from '../core';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChildren,\n  QueryList,\n  forwardRef,\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {CanDisable, mixinDisabled} from '../../core/common-behaviors/disabled';\nimport {MdRipple} from '../../core';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {Directionality, MD_RIPPLE_GLOBAL_OPTIONS, Platform, RippleGlobalOptions} from '../../core';\nimport {CanColor, mixinColor, ThemePalette} from '../../core/common-behaviors/color';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {takeUntil, auditTime} from '../../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {CanDisableRipple, mixinDisableRipple} from '../../core/common-behaviors/disable-ripple';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n/**\n * \\@docs-private\n */\nexport class MdTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBase.prototype._renderer;\n/** @type {?} */\nMdTabNavBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabNavMixinBase = mixinDisableRipple(mixinColor(MdTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav extends _MdTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MdTabLink>;\n/**\n * Subscription for window.resize event *\n */\nprivate _resizeSubscription: Subscription;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._resizeSubscription = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n    this._setLinkDisableRipple();\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n\n    if (this._resizeSubscription) {\n      this._resizeSubscription.unsubscribe();\n    }\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MdTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMdTabNav.prototype._tabLinks;\n/**\n * Subscription for window.resize event *\n * @type {?}\n */\nMdTabNav.prototype._resizeSubscription;\n/** @type {?} */\nMdTabNav.prototype._backgroundColor;\n/** @type {?} */\nMdTabNav.prototype._disableRipple;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n/** @type {?} */\nMdTabNav.prototype._changeDetectorRef;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMdTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Sets the proper styles to the ink bar element.\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  AfterContentInit,\n  AfterContentChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdTab} from './tab';\nimport {map} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\nimport {CanColor, mixinColor, ThemePalette} from '../core/common-behaviors/color';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MdTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroupBase.prototype._renderer;\n/** @type {?} */\nMdTabGroupBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabGroupMixinBase = mixinColor(mixinDisableRipple(MdTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup extends _MdTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\n\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription: Subscription;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription: Subscription;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return map.call(this.selectChange, event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(_renderer, elementRef);\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabsSubscription) {\n      this._tabsSubscription.unsubscribe();\n    }\n\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n * on the MdTab component, whereas the data binding is inside the MdTabGroup. In order for the\n * binding to be updated, we need to subscribe to changes in it and trigger change detection\n * manually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMdTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMdTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._backgroundColor;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component, ChangeDetectionStrategy, OnDestroy, OnChanges, SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdTabLabel} from './tab-label';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._labelChange.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMdTab.prototype._labelChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MD_SNACK_BAR_DATA,MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  ComponentRef,\n  Optional,\n  SkipSelf,\n  Injector,\n} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {MdSnackBarConfig, MD_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {first} from '../core/rxjs/index';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'translateY(100%)'})),\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness, Direction} from '../core';\n\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, Optional, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n * @param {?} formControl\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _platform: Platform,\n      formControl: NgControl) {\n\n    if (formControl && formControl.valueChanges) {\n      formControl.valueChanges.subscribe(() => this.resizeToFitContent());\n    }\n  }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    if (textarea.value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = textarea.value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, Platform} from '../core';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions\n} from '../core/placeholder/placeholder-options';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '../core/error/error-options';\nimport {Subject} from 'rxjs/Subject';\nimport {startWith} from '@angular/cdk/rxjs';\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective {\n   id: string = `md-input-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-input-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n/** @type {?} */\nMdErrorDirective.propDecorators;\n/** @type {?} */\nMdErrorDirective.prototype.id;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective implements OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _readonly = false;\nprivate _id: string;\nprivate _uid = `md-input-${nextUniqueId++}`;\nprivate _errorOptions: ErrorOptions;\nprivate _previousNativeValue = this.value;\n/**\n * Whether the input is in an error state.\n */\n_isErrorState = false;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes. This allows for other components\n * (mostly `md-input-container`) that depend on the properties of `mdInput` to update their view.\n */\n_stateChanges = new Subject<void>();\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._ngControl ? this._ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * Whether the element is readonly.\n * @return {?}\n */\nget readonly() { return this._readonly; }\n/**\n * @param {?} value\n * @return {?}\n */\nset readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this._stateChanges.next();\n    }\n  }\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic _ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this._stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    if (!this._readonly) {\n      this.focused = true;\n    }\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this._stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprivate _updateErrorState() {\n    const /** @type {?} */ oldState = this._isErrorState;\n    const /** @type {?} */ control = this._ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = control && this.errorStateMatcher( /** @type {?} */((control.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this._isErrorState = newState;\n      this._stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprivate _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this._stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type isn't one of the types that are never empty.\n * @return {?}\n */\nprivate _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-invalid]': '_isErrorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'readonly': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._readonly;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._uid;\n/** @type {?} */\nMdInputDirective.prototype._errorOptions;\n/** @type {?} */\nMdInputDirective.prototype._previousNativeValue;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInputDirective.prototype._isErrorState;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes. This allows for other components\n * (mostly `md-input-container`) that depend on the properties of `mdInput` to update their view.\n * @type {?}\n */\nMdInputDirective.prototype._stateChanges;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInputDirective.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInputDirective.prototype.errorStateMatcher;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._platform;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n/** @type {?} */\nMdInputDirective.prototype._parentForm;\n/** @type {?} */\nMdInputDirective.prototype._parentFormGroup;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\n   _mdInputChild: MdInputDirective;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdErrorDirective>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n      placeholderOptions: PlaceholderOptions) {\n      this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n      this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n\n    // Subscribe to changes in the child input state in order to update the container UI.\n    startWith.call(this._mdInputChild._stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncAriaDescribedby();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._mdInputChild._ngControl && this._mdInputChild._ngControl.valueChanges) {\n      this._mdInputChild._ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncAriaDescribedby();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._mdInputChild.placeholder || this._placeholderChild);\n  }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() {\n    this._mdInputChild.focus();\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    let /** @type {?} */ input = this._mdInputChild;\n    return (this._errorChildren && this._errorChildren.length > 0 && input._isErrorState) ?\n        'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprotected _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    'class': 'mat-input-container',\n    '[class.mat-input-invalid]': '_mdInputChild._isErrorState',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/** @type {?} */\nMdInputContainer.prototype._placeholderOptions;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._connectionContainerRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconBase,_MdIconMixinBase,MdIcon} from './icon';\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {first} from '../core/rxjs/index';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon && this.svgIcon) {\n      const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n      first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {RxChain, map, doOperator, catchOperator, finallyOperator, share} from '../core/rxjs/index';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove} from './chip';\nexport {MdChipInputEvent,MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Output, EventEmitter, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '../core/keyboard/keycodes';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\nexport class MdChipInput {\n\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this._inputElement);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n  Optional,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '../core/keyboard/keycodes';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n\n  protected _inputElement: HTMLInputElement;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(protected _renderer: Renderer2, protected _elementRef: ElementRef,\nprivate _dir: Directionality) {\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // Make sure we set our tab index at the start\n    this._updateTabIndex();\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n\n      // If we have 0 chips, attempt to focus an input (if available)\n      if (chips.length === 0) {\n        this._focusInput();\n      }\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: HTMLInputElement) {\n    this._inputElement = inputElement;\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._focusInput();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._chipSet.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and setup our destroyed focus check\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n      if (this._isValidIndex(chipIndex)) {\n        if (chip._hasFocus) {\n          // Check whether the chip is the last item\n          if (chipIndex < this.chips.length - 1) {\n            this._keyManager.setActiveItem(chipIndex);\n          } else if (chipIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(chipIndex - 1);\n          }\n        }\n        if (this._keyManager.activeItemIndex === chipIndex) {\n          this._lastDestroyedIndex = chipIndex;\n        }\n\n      }\n\n      this._chipSet.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._chipSet.set(chip, true);\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/** @type {?} */\nMdChipList.prototype._inputElement;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  forwardRef,\n} from '@angular/core';\n\nimport {FocusableOption} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {SPACE, BACKSPACE, DELETE} from '../core/keyboard/keycodes';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n   _chipRemove: MdChipRemove;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nget ariaSelected(): string {\n    return this.selectable ? this.selected.toString() : '';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?}\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected();\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_chipRemove': [{ type: ContentChild, args: [forwardRef(() => MdChipRemove), ] },],\n'selected': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._chipRemove;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick() {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title],' +\n  '[mdCardTitle], [matCardTitle]',\n  host: {\n    'class': 'mat-card-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],' +\n  '[mdCardSubtitle], [matCardSubtitle]',\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n/** @type {?} */\nMdCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMdCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/index';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {animate, state, style, transition, trigger, AnimationEvent} from '@angular/animations';\nimport {Directionality, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {first, takeUntil, startWith} from '../core/rxjs/index';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n * @deprecated\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement | null = null;\n/**\n * Whether the sidenav is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the sidenav has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the sidenav is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do sidenav breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MdSidenavToggleResult> | null;\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<MdSidenavToggleResult | void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<MdSidenavToggleResult | void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeSidenavWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeSidenavWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    Promise.resolve().then(() => this._enableAnimations = true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the sidenav.\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the sidenav.\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here backwards-compatibility.\n    // It should be removed next time we do breaking changes in the sidenav.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * Figures out the state of the sidenav animation.\n * @return {?}\n */\n_getAnimationState(): 'open-instant' | 'open' | 'void' {\n    if (this.opened) {\n      return this._enableAnimations ? 'open' : 'open-instant';\n    }\n\n    return 'void';\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MdSidenavToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MdSidenavToggleResult('close', true));\n    }\n\n    this._isAnimating = false;\n    this._currentTogglePromise = null;\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  templateUrl: 'sidenav.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-sidenav',\n    '[@transform]': '_getAnimationState()',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-end]': 'align === \"end\"',\n    '[class.mat-sidenav-over]': 'mode === \"over\"',\n    '[class.mat-sidenav-push]': 'mode === \"push\"',\n    '[class.mat-sidenav-side]': 'mode === \"side\"',\n    'tabIndex': '-1'\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/**\n * Whether the sidenav is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdSidenav.prototype._enableAnimations;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Emits whenever the sidenav has started animating.\n * @type {?}\n */\nMdSidenav.prototype._animationStarted;\n/**\n * Whether the sidenav is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdSidenav.prototype._isAnimating;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do sidenav breaking changes.\n * @deprecated\n * @type {?}\n */\nMdSidenav.prototype._currentTogglePromise;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n/** @type {?} */\nMdSidenav.prototype._doc;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav | null;\nprivate _end: MdSidenav | null;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav | null;\nprivate _right: MdSidenav | null;\n/**\n * Inline styles to be applied to the container.\n */\n_styles: { marginLeft: string; marginRight: string; transform: string; };\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._sidenavs.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._sidenavs.forEach((sidenav: MdSidenav) => {\n        this._watchSidenavToggle(sidenav);\n        this._watchSidenavAlign(sidenav);\n      });\n    });\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\nopen(): void {\n    this._sidenavs.forEach(sidenav => sidenav.open());\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\nclose(): void {\n    this._sidenavs.forEach(sidenav => sidenav.close());\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    takeUntil.call(sidenav._animationStarted, this._sidenavs.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-transition');\n      this._updateStyles();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (sidenav.mode !== 'side') {\n      takeUntil.call(merge(sidenav.onOpen, sidenav.onClose), this._sidenavs.changes).subscribe(() =>\n          this._setContainerClass(sidenav.opened));\n    }\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    takeUntil.call(sidenav.onAlignChanged, this._sidenavs.changes).subscribe(() =>\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    this._sidenavs.forEach(sidenav => {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => /** @type {?} */(( sidenav)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isSidenavOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav | null): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * Recalculates and updates the inline styles. Note that this\n * should be used sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateStyles() {\n    const /** @type {?} */ marginLeft = this._left ? this._getSidenavEffectiveWidth(this._left, 'side') : 0;\n    const /** @type {?} */ marginRight = this._right ? this._getSidenavEffectiveWidth(this._right, 'side') : 0;\n    const /** @type {?} */ leftWidth = this._left ? this._getSidenavEffectiveWidth(this._left, 'push') : 0;\n    const /** @type {?} */ rightWidth = this._right ? this._getSidenavEffectiveWidth(this._right, 'push') : 0;\n\n    this._styles = {\n      marginLeft: `${marginLeft}px`,\n      marginRight: `${marginRight}px`,\n      transform: `translate3d(${leftWidth - rightWidth}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    'class': 'mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Inline styles to be applied to the container.\n * @type {?}\n */\nMdSidenavContainer.prototype._styles;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n/** @type {?} */\nMdSidenavContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '../core/bidi/index';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, StyleModule, BidiModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewChild,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Directionality} from '../core/bidi/index';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor\n        .monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n  PlatformModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, OverlayModule, MdOptionModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Directive,\n} from '@angular/core';\nimport {NgForm, FormGroupDirective} from '@angular/forms';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Directionality} from '../core/bidi/index';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {Overlay} from '../core/overlay/overlay';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport {startWith, filter} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n// This import is only used to define a generic type. The current TypeScript version incorrectly\n// considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n// tslint:disable-next-line:no-unused-variable\n\nimport {ScrollStrategy, RepositionScrollStrategy} from '../core/overlay/scroll/index';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _overlay\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _overlay: Overlay,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._setSelectionByValue(this._control ? this._control.value : this._value);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Overlay, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._overlay;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<FocusableOption> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule],\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\nexport {_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator} from './checkbox-required-validator';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n  'md-checkbox[required][formControlName],' +\n  'mat-checkbox[required][formControlName],' +\n  'md-checkbox[required][formControl],md-checkbox[required][ngModel],' +\n  'mat-checkbox[required][formControl],mat-checkbox[required][ngModel]',\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdLineModule} from './line/line';\nimport {BidiModule} from './bidi/index';\nimport {MdOptionModule} from './option/index';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/index';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n// Re-exports of the CDK to avoid breaking changes.\nexport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n} from '@angular/cdk/coercion';\n\nexport {\n  ObserversModule,\n  ObserveContent,\n} from '@angular/cdk/observers';\n\n// RTL\nexport {Dir, Direction, Directionality, BidiModule} from './bidi/index';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\n\n// Error\nexport {\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS,\n  defaultErrorStateMatcher,\n  showOnDirtyErrorStateMatcher\n} from './error/error-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional, LOCALE_ID} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} localeId\n */\nconstructor(  localeId: any) {\n    super();\n    super.setLocale(localeId);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Platform} from '../platform/platform';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ cachedInfo = this._elementInfo.get(element); /** @type {?} */((\n      cachedInfo)).checkChildren = checkChildren;\n      return /** @type {?} */(( cachedInfo)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {ScrollDispatchModule} from './scroll/index';\nimport {PortalModule} from '../portal/portal-directives';\nimport {\n  ConnectedOverlayDirective,\n  OverlayOrigin,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\n\n\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\n\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {OverlayState} from './overlay-state';\nexport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nexport {ViewportRuler} from './position/viewport-ruler';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n    InjectionToken,\n    Inject,\n} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    // This import is only used to define a generic type. The current TypeScript version incorrectly\n    // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n    // tslint:disable-next-line:no-unused-variable\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Directionality, Direction} from '../bidi/index';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ScrollStrategy, RepositionScrollStrategy} from './scroll/index';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nconst defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription | null;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number { return this._offsetX; }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() { return this._offsetY; }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() { return this._hasBackdrop; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOrigin(): OverlayOrigin { return this.origin; }\n/**\n * @param {?} _origin\n * @return {?}\n */\nset _deprecatedOrigin(_origin: OverlayOrigin) { this.origin = _origin; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPositions(): ConnectionPositionPair[] { return this.positions; }\n/**\n * @param {?} _positions\n * @return {?}\n */\nset _deprecatedPositions(_positions: ConnectionPositionPair[]) { this.positions = _positions; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetX(): number { return this.offsetX; }\n/**\n * @param {?} _offsetX\n * @return {?}\n */\nset _deprecatedOffsetX(_offsetX: number) { this.offsetX = _offsetX; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetY(): number { return this.offsetY; }\n/**\n * @param {?} _offsetY\n * @return {?}\n */\nset _deprecatedOffsetY(_offsetY: number) { this.offsetY = _offsetY; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedWidth(): number | string { return this.width; }\n/**\n * @param {?} _width\n * @return {?}\n */\nset _deprecatedWidth(_width: number | string) { this.width = _width; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHeight(): number | string { return this.height; }\n/**\n * @param {?} _height\n * @return {?}\n */\nset _deprecatedHeight(_height: number | string) { this.height = _height; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinWidth(): number | string { return this.minWidth; }\n/**\n * @param {?} _minWidth\n * @return {?}\n */\nset _deprecatedMinWidth(_minWidth: number | string) { this.minWidth = _minWidth; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinHeight(): number | string { return this.minHeight; }\n/**\n * @param {?} _minHeight\n * @return {?}\n */\nset _deprecatedMinHeight(_minHeight: number | string) { this.minHeight = _minHeight; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedBackdropClass(): string { return this.backdropClass; }\n/**\n * @param {?} _backdropClass\n * @return {?}\n */\nset _deprecatedBackdropClass(_backdropClass: string) { this.backdropClass = _backdropClass; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedScrollStrategy(): ScrollStrategy { return this.scrollStrategy; }\n/**\n * @param {?} _scrollStrategy\n * @return {?}\n */\nset _deprecatedScrollStrategy(_scrollStrategy: ScrollStrategy) {\n    this.scrollStrategy = _scrollStrategy;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOpen(): boolean { return this.open; }\n/**\n * @param {?} _open\n * @return {?}\n */\nset _deprecatedOpen(_open: boolean) { this.open = _open; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHasBackdrop() { return this.hasBackdrop; }\n/**\n * @param {?} _hasBackdrop\n * @return {?}\n */\nset _deprecatedHasBackdrop(_hasBackdrop: any) { this.hasBackdrop = _hasBackdrop; }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open'] || changes['_deprecatedOpen']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_CONNECTED_OVERLAY_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input, args: ['cdkConnectedOverlayOrigin', ] },],\n'positions': [{ type: Input, args: ['cdkConnectedOverlayPositions', ] },],\n'offsetX': [{ type: Input, args: ['cdkConnectedOverlayOffsetX', ] },],\n'offsetY': [{ type: Input, args: ['cdkConnectedOverlayOffsetY', ] },],\n'width': [{ type: Input, args: ['cdkConnectedOverlayWidth', ] },],\n'height': [{ type: Input, args: ['cdkConnectedOverlayHeight', ] },],\n'minWidth': [{ type: Input, args: ['cdkConnectedOverlayMinWidth', ] },],\n'minHeight': [{ type: Input, args: ['cdkConnectedOverlayMinHeight', ] },],\n'backdropClass': [{ type: Input, args: ['cdkConnectedOverlayBackdropClass', ] },],\n'scrollStrategy': [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy', ] },],\n'open': [{ type: Input, args: ['cdkConnectedOverlayOpen', ] },],\n'hasBackdrop': [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop', ] },],\n'_deprecatedOrigin': [{ type: Input, args: ['origin', ] },],\n'_deprecatedPositions': [{ type: Input, args: ['positions', ] },],\n'_deprecatedOffsetX': [{ type: Input, args: ['offsetX', ] },],\n'_deprecatedOffsetY': [{ type: Input, args: ['offsetY', ] },],\n'_deprecatedWidth': [{ type: Input, args: ['width', ] },],\n'_deprecatedHeight': [{ type: Input, args: ['height', ] },],\n'_deprecatedMinWidth': [{ type: Input, args: ['minWidth', ] },],\n'_deprecatedMinHeight': [{ type: Input, args: ['minHeight', ] },],\n'_deprecatedBackdropClass': [{ type: Input, args: ['backdropClass', ] },],\n'_deprecatedScrollStrategy': [{ type: Input, args: ['scrollStrategy', ] },],\n'_deprecatedOpen': [{ type: Input, args: ['open', ] },],\n'_deprecatedHasBackdrop': [{ type: Input, args: ['hasBackdrop', ] },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._scrollStrategy;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    const /** @type {?} */ pane = this._createPaneElement();\n    const /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, this._ngZone);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      if (this._themeClass) {\n        this._containerElement.classList.remove(this._themeClass);\n      }\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n/**\n * \\@docs-private\n */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement | null = null;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New top offset.\n * @return {?}\n */\ntop(value = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New left offset.\n * @return {?}\n */\nleft(value = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New bottom offset.\n * @return {?}\n */\nbottom(value = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New right offset.\n * @return {?}\n */\nright(value = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?=} value New width for the overlay\n * @return {?}\n */\nwidth(value = ''): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?=} value New height for the overlay\n * @return {?}\n */\nheight(value = ''): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    if (!this._wrapper && element.parentNode) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint | undefined;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair | undefined;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        return;\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, /** @type {?} */(( fallbackPoint)), /** @type {?} */(( fallbackPosition)));\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n\n    // Notify that the position has been changed along with its change properties.\n    const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n    const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n    this._onPositionChange.next(positionChange);\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea: number;\n  fitsInViewport: boolean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) {\n\n    _state.scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._state.scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      if (Array.isArray(this._state.panelClass)) {\n        this._state.panelClass.forEach(cls => this._pane.classList.add(cls));\n      } else {\n        this._pane.classList.add(this._state.panelClass);\n      }\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._state.scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this._state.scrollStrategy.disable();\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '../bidi/index';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = new NoopScrollStrategy();\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop?: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass?: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth?: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight?: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth?: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight?: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection?: Direction = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if ('focus' in element) {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\nimport {ScrollStrategyOptions} from './scroll-strategy-options';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: '', left: '' };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n/**\n * \\@docs-private\n */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from '../../rxjs/index';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return merge(\n          fromEvent(window.document, 'scroll'),\n          fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-icon,\n  mat-input-container,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-icon,\n  md-input-container,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.8-chips-2');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["EventEmitter","Directive","tslib_1.__extends","Input","coerceBooleanProperty","A11yModule","ChangeDetectorRef","ChangeDetectionStrategy","Output","Optional","Inject","Renderer2","DOWN_ARROW","Validators","forwardRef","NG_VALUE_ACCESSOR","ViewContainerRef","Component","first","ComponentPortal","ViewChild","ESCAPE","InjectionToken","ElementRef","ViewEncapsulation","HOME","UP_ARROW","RIGHT_ARROW","ENTER","PAGE_DOWN","PAGE_UP","END","LEFT_ARROW","nextId","Subject","filter","CommonModule","NgModule","DOCUMENT","Host","Directionality","NgZone","TemplatePortal","switchMap","RxChain","merge","fromEvent","ContentChildren","TemplateRef","Location","Injector","Injectable","FocusTrapFactory","state","style","isFakeMousedownFromScreenReader","of","animate","transition","trigger","Platform","startWith","auditTime","PortalHostDirective","takeUntil","observableOf","PortalModule","SkipSelf","LiveAnnouncer","BasePortalHost","PlatformModule","ContentChild","NgForm","NgControl","Self","getSupportedInputTypes","Attribute","nextUniqueId","DomSanitizer","Http","share","finallyOperator","map","SecurityContext","clamp","doOperator","catchOperator","_throw","BACKSPACE","DELETE","HAMMER_GESTURE_CONFIG","BidiModule","coerceNumberProperty","ObserversModule","CheckboxRequiredValidator","_uniqueIdCounter","ApplicationRef","ComponentFactoryResolver","SPACE","Subscription","Version"],"mappings":"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}